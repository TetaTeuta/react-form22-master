{"version":3,"sources":["serviceWorker.js","components/list.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","List","props","state","list","axios","get","then","response","setState","data","console","log","catch","err","fetch","json","this","refreshList","nameid","confirm","method","header","Accept","className","map","key","_id","firstName","lastName","email","Button","onClick","deleteName","React","Component","App","useState","name","setName","surname","setSurname","setEmail","type","placeholder","value","onChange","e","target","onKeyPress","Event","preventDefault","post","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"4MAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mECdOC,EAAb,kDACE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,KAAM,IAJS,EADrB,gEASuB,IAAD,OAClBC,IACGC,IADH,0DAEGC,MAAK,SAAAC,GACJ,EAAKC,SAAS,CACZL,KAAMI,EAASE,OAEjBC,QAAQC,IAAIJ,MAEbK,OAAM,SAAAC,GACLH,QAAQC,IAAIE,QAnBpB,oCAuBiB,IAAD,OACZC,MAAM,0DACHR,MAAK,SAAAC,GAAQ,OAAIA,EAASQ,UAC1BT,MAAK,SAAAG,GACJ,EAAKD,SAAS,CAAEL,KAAMM,SA3B9B,2CAgCIO,KAAKC,gBAhCT,iCAmCaC,GACLtB,OAAOuB,QAAQ,qCACjBL,MACE,0DAA4DI,EAC5D,CACEE,OAAQ,SACRC,OAAQ,CACNC,OAAQ,mBACR,eAAgB,wBA3C5B,+BAkDY,IAAD,OACCnB,EAASa,KAAKd,MAAdC,KAER,OAAKA,EAGH,yBAAKoB,UAAU,oBACZpB,EAAKqB,KAAI,SAAArB,GAAI,OACZ,yBAAKoB,UAAU,cAAcE,IAAKtB,EAAKuB,KACpCvB,EAAKwB,UADR,OAEGxB,EAAKyB,SAFR,OAGGzB,EAAK0B,MACN,kBAACC,EAAA,EAAD,CACEP,UAAU,UACVQ,QAAS,kBAAM,EAAKC,WAAW7B,EAAKuB,OAFtC,UATU,gDArDtB,GAA0BO,IAAMC,WC0EjBC,MAxER,WAAgB,IAAD,EACIC,mBAAS,IADb,mBACbC,EADa,KACPC,EADO,OAEUF,mBAAS,IAFnB,mBAEbG,EAFa,KAEJC,EAFI,OAGMJ,mBAAS,IAHf,mBAGbP,EAHa,KAGNY,EAHM,KAmCpB,OACE,8BACE,2BACElB,UAAU,cACVmB,KAAK,OACLC,YAAY,MACZN,KAAK,YACLO,MAAOP,EACPQ,SAAU,SAAAC,GAAC,OAAIR,EAAQQ,EAAEC,OAAOH,UAElC,2BACEF,KAAK,OACLC,YAAY,UACZN,KAAK,WACLO,MAAOL,EACPM,SAAU,SAAAC,GAAC,OAAIN,EAAWM,EAAEC,OAAOH,UAErC,2BACEF,KAAK,OACLC,YAAY,QACZN,KAAK,QACLO,MAAOf,EACPgB,SAAU,SAAAC,GAAC,OAAIL,EAASK,EAAEC,OAAOH,QACjCI,WAvCiB,SAAAF,GACH,UAAdG,MAAMxB,MACRqB,EAAEI,iBACFxC,QAAQC,IAAI0B,EAAME,EAASV,GAC3BzB,IACG+C,KADH,yDACkE,CAC9DxB,UAAWU,EACXT,SAAUW,EACVV,MAAOA,IAERjB,OAAM,SAAAkC,GACLpC,QAAQC,IAAI,+BA8BhB,kBAACmB,EAAA,EAAD,CAAQP,UAAU,YAAYmB,KAAK,SAASX,QAvD3B,SAAAe,GACnBA,EAAEI,iBACFxC,QAAQC,IAAI0B,EAAME,EAASV,GAC3BzB,IACG+C,KADH,yDACkE,CAC9DxB,UAAWU,EACXT,SAAUW,EACVV,MAAOA,IAERjB,OAAM,SAAAkC,GACLpC,QAAQC,IAAI,6BA6Cd,gCAGA,+DACA,yBAAKY,UAAU,QACZ,IACD,kBAAC,EAAD,SClER6B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SH6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpD,MAAK,SAAAqD,GACJA,EAAaC,gBAEdhD,OAAM,SAAAiD,GACLnD,QAAQmD,MAAMA,EAAMC,c","file":"static/js/main.3b62b34a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport axios from \"axios\";\nimport { Button } from \"reactstrap\";\n\nexport class List extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      list: []\n    };\n  }\n\n  componentDidMount() {\n    axios\n      .get(`https://delicat-baguette-35097.herokuapp.com/api/names`)\n      .then(response => {\n        this.setState({\n          list: response.data\n        });\n        console.log(response);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }\n\n  refreshList() {\n    fetch(\"https://delicat-baguette-35097.herokuapp.com/api/names\")\n      .then(response => response.json())\n      .then(data => {\n        this.setState({ list: data });\n      });\n  }\n\n  componentDidUpdate() {\n    this.refreshList();\n  }\n\n  deleteName(nameid) {\n    if (window.confirm(\"Are you sure you want to delete?\")) {\n      fetch(\n        \"https://delicat-baguette-35097.herokuapp.com/api/names/\" + nameid,\n        {\n          method: \"DELETE\",\n          header: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\"\n          }\n        }\n      );\n    }\n  }\n\n  render() {\n    const { list } = this.state;\n\n    if (!list) return <p>List is blank</p>;\n\n    return (\n      <div className=\"names__container\">\n        {list.map(list => (\n          <div className=\"single_name\" key={list._id}>\n            {list.firstName}&nbsp;\n            {list.lastName}&nbsp;\n            {list.email}\n            <Button\n              className=\"xbutton\"\n              onClick={() => this.deleteName(list._id)}\n            >\n              X\n            </Button>\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n","import React, { useState } from \"react\";\n// import { useForm } from \"react-hook-form\";\nimport { List } from \"./components/list\";\nimport { Button } from \"reactstrap\";\nimport axios from \"axios\";\n\nexport function App() {\n  const [name, setName] = useState(\"\");\n  const [surname, setSurname] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(name, surname, email);\n    axios\n      .post(`https://delicat-baguette-35097.herokuapp.com/api/names`, {\n        firstName: name,\n        lastName: surname,\n        email: email\n      })\n      .catch(e => {\n        console.log(\"Something went wrong\");\n      });\n  };\n\n  const handleKeyPress = e => {\n    if (Event.key === \"Enter\") {\n      e.preventDefault();\n      console.log(name, surname, email);\n      axios\n        .post(`https://delicat-baguette-35097.herokuapp.com/api/names`, {\n          firstName: name,\n          lastName: surname,\n          email: email\n        })\n        .catch(e => {\n          console.log(\"Something went wrong\");\n        });\n    }\n  };\n\n  return (\n    <form>\n      <input\n        className=\"input__item\"\n        type=\"text\"\n        placeholder=\"Ime\"\n        name=\"firstName\"\n        value={name}\n        onChange={e => setName(e.target.value)}\n      ></input>\n      <input\n        type=\"text\"\n        placeholder=\"Prezime\"\n        name=\"lastName\"\n        value={surname}\n        onChange={e => setSurname(e.target.value)}\n      ></input>\n      <input\n        type=\"text\"\n        placeholder=\"Email\"\n        name=\"email\"\n        value={email}\n        onChange={e => setEmail(e.target.value)}\n        onKeyPress={handleKeyPress}\n      ></input>\n      <Button className=\"addButton\" type=\"submit\" onClick={handleSubmit}>\n        Click me to POST data to API\n      </Button>\n      <p>Min 3 charachters for each input</p>\n      <div className=\"list\">\n        {\" \"}\n        <List />\n      </div>\n    </form>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}